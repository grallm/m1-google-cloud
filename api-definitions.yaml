openapi: 3.0.3
info:
  title: REST API - App Engine Java Servlet
  version: '1.0'
  x-logo:
    url: ''
  description: |-
    Our REST API routes definition our "Web, Cloud and Datastores" project
    Malo GRALL @grallm
    Guillaume POIGNANT
    Mathis ROCHER
servers:
  - url: https://api.example.io
paths:
# POSTS
  /post:
    summary: Get all posts
    get:
      tags: ["post"]
      responses:
        '200':
          description: OK

  # Specific post
  /post/{postId}:
    summary: Get specific Post
    get:
      tags: ["post"]
      parameters:
      - name: "postId"
        in: "path"
        required: true
        schema:
          type: string
      security:
        - {}
        - BasicAuth: []
      responses:
        '200':
          description: |-
            - Post data : creator (name, profile image), image, description, number likes, date
            - Auth : if liked
    # Like/Unlike an User
    post:
      description: Follow/Unfollow an User
      tags: ["post"]
      parameters:
      - name: "postId"
        in: "path"
        required: true
        schema:
          type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: OK

# USERS
  /user:
    summary: Get all Users
    get:
      tags: ["user"]
      responses:
        '200':
          description: OK

  /user/{userId}:
    get:
      description: Get specific User
      tags: ["user"]
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: string
      security:
        - {}
        - BasicAuth: []
      responses:
        '200':
          description: |-
            - User data : name, followers, number posts
            - Auth : if follow
    # Follow/Unfollow an User
    post:
      description: Follow/Unfollow an User
      tags: ["user"]
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: OK

  # User's posts
  /user/{userId}/posts:
    summary: Get posts of a User
    get:
      tags: ["user"]
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: string
      security:
        - {}
        - BasicAuth: []
      responses:
        '200':
          description: |-
            - All posts, same data than `/post/{postId}`
            - Auth : if liked

  # Get following
  /user/{userId}/following:
    summary: Get all followed account from User
    get:
      tags: ["user"]
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK

tags:
  - name: post
    description: Everything linked to "TinyGram" posts
  - name: user
    description: Everything linked to "TinyGram" users

components:
  securitySchemes:
    Auth:
      type: http
      scheme: basic
  schemas: {}
  headers: {}
  responses: {}
  parameters: {}